class Player
{
    field int px,py;
    constructor Player new(int _px,int _py)
    {
        let px=_px;
        let py=_py;
        return this;
    }
    method void draw()
    {
        var int memAddress;
        let  memAddress = 16384+(px*16*32)+py;
        do Memory.poke(memAddress+0, 8640);
        do Memory.poke(memAddress+32, 12736);
        do Memory.poke(memAddress+64, 6592);
        do Memory.poke(memAddress+96, 4064);
        do Memory.poke(memAddress+128, 2032);
        do Memory.poke(memAddress+160, 3960);
        do Memory.poke(memAddress+192, 8188);
        do Memory.poke(memAddress+224, 7148);
        do Memory.poke(memAddress+256, 31740);
        do Memory.poke(memAddress+288, 13308);
        do Memory.poke(memAddress+320, 13292);
        do Memory.poke(memAddress+352, 12742);
        do Memory.poke(memAddress+384, 9059);
        do Memory.poke(memAddress+416, 864);
        do Memory.poke(memAddress+448, 1904);
        do Memory.poke(memAddress+480, 3960);
        return;
    }
    method void clear_scrn()
    {
        var int memAddress;
        let  memAddress = 16384+(px*16*32)+py;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return ;
    }
    method void init(int x,int y)
    {
        let px=x;
        let py=y;
        return;
    }
    method boolean valid(int x,int y,int dx,int dy)
    {
        
        //if(~Main.game.map.valid(x,y))
        var Block tmpBlock;
        var Array tmpArray;
        var int tmpInt;
        
        if(Map.get_map(x,y)=1)
        {
            return false;
        }
        let tmpInt=Blocks.find_block(x,y);
        if(~tmpInt)//!=-1
        {
            let tmpArray=Blocks._blocks();
            let tmpBlock=tmpArray[tmpInt];
            do tmpBlock.move(dx,dy);
        }
        let tmpInt=Blocks.find_block(x,y);
        if(~tmpInt)//!=-1
        {
            return false;
        }
        return true;
    }
    method int _px()
    {
        return px;
    }
    method int _py()
    {
        return py;
    }
    method void move(int dx,int dy)
    {
        if(valid(px+dx,py+dy,dx,dy))
        {
            let px=px+dx;
            let py=py+dy;
            do Player_log.add();
        }
        return;
    }
    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}